{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeanv\\\\OneDrive\\\\Documentos\\\\Netflix-clone\\\\src\\\\context\\\\HomeMovies\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useContext } from 'react';\nimport Tmdb from '../../api/Tmdb';\nimport Youtube from '../../api/Youtube';\nimport { DetailsSerieContext } from '../DetailsSerie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultValue = {\n  homeMovies: [],\n  setHomeMovies: () => {}\n};\nexport const HomeMoviesContext = /*#__PURE__*/createContext(defaultValue);\nexport const HomeMoviesProvider = ({\n  children\n}) => {\n  _s();\n\n  const [homeMovies, setHomeMovies] = useState(defaultValue.homeMovies);\n  const {\n    setDetailsSerie,\n    detailsSerie\n  } = useContext(DetailsSerieContext);\n  useEffect(() => {\n    const loadPage = async () => {\n      const movies = await Tmdb.getHomeMovies();\n      setHomeMovies(movies);\n      const netflixSeries = movies.filter(list => list.slug === \"Netflix\")[0].movies;\n      const randomSerie = netflixSeries[Math.floor(Math.random() * (netflixSeries.length - 1))];\n      const detailsRandomSerie = await Tmdb.getDetailsSerie(randomSerie.id);\n      const trailerKey = await Youtube.getTrailer(detailsRandomSerie.name);\n      const detailsSerieWithTrailer = Object.assign(detailsRandomSerie, {\n        trailerKey\n      });\n      setDetailsSerie(detailsSerieWithTrailer);\n      console.log(detailsSerie, homeMovies);\n    };\n\n    loadPage();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(HomeMoviesContext.Provider, {\n    value: {\n      homeMovies,\n      setHomeMovies\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HomeMoviesProvider, \"2nFQlLk79MvXNrg+3qQ1+pKlTZI=\");\n\n_c = HomeMoviesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomeMoviesProvider\");","map":{"version":3,"sources":["C:/Users/jeanv/OneDrive/Documentos/Netflix-clone/src/context/HomeMovies/index.tsx"],"names":["createContext","useState","useEffect","useContext","Tmdb","Youtube","DetailsSerieContext","defaultValue","homeMovies","setHomeMovies","HomeMoviesContext","HomeMoviesProvider","children","setDetailsSerie","detailsSerie","loadPage","movies","getHomeMovies","netflixSeries","filter","list","slug","randomSerie","Math","floor","random","length","detailsRandomSerie","getDetailsSerie","id","trailerKey","getTrailer","name","detailsSerieWithTrailer","Object","assign","console","log"],"mappings":";;;AAAA,SACIA,aADJ,EAKIC,QALJ,EAMIC,SANJ,EAOIC,UAPJ,QAQO,OARP;AASA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,mBAAT,QAAmC,iBAAnC;;AA6CA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAC,EADM;AAEjBC,EAAAA,aAAa,EAAE,MAAM,CAAE;AAFN,CAArB;AAKA,OAAO,MAAMC,iBAAiB,gBAAGV,aAAa,CAAyBO,YAAzB,CAAvC;AAMP,OAAO,MAAMI,kBAAkB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAyC;AAAA;;AACvE,QAAM,CAAEJ,UAAF,EAAcC,aAAd,IAAgCR,QAAQ,CAAaM,YAAY,CAACC,UAA1B,CAA9C;AACA,QAAM;AAAEK,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAmCX,UAAU,CAACG,mBAAD,CAAnD;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,QAAQ,GAAG,YAAW;AAC1B,YAAMC,MAAM,GAAI,MAAMZ,IAAI,CAACa,aAAL,EAAtB;AACAR,MAAAA,aAAa,CAACO,MAAD,CAAb;AAEA,YAAME,aAAa,GAAGF,MAAM,CAACG,MAAP,CAAcC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,SAApC,EAA+C,CAA/C,EAAkDL,MAAxE;AACA,YAAMM,WAAW,GAAGJ,aAAa,CAACK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,aAAa,CAACQ,MAAd,GAAuB,CAAxC,CAAX,CAAD,CAAjC;AACA,YAAMC,kBAAkB,GAAG,MAAMvB,IAAI,CAACwB,eAAL,CAAqBN,WAAW,CAACO,EAAjC,CAAjC;AACA,YAAMC,UAAU,GAAG,MAAMzB,OAAO,CAAC0B,UAAR,CAAmBJ,kBAAkB,CAACK,IAAtC,CAAzB;AACA,YAAMC,uBAAuB,GAAGC,MAAM,CAACC,MAAP,CAAcR,kBAAd,EAAkC;AAACG,QAAAA;AAAD,OAAlC,CAAhC;AAEAjB,MAAAA,eAAe,CAACoB,uBAAD,CAAf;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYvB,YAAZ,EAA0BN,UAA1B;AACD,KAZD;;AAeAO,IAAAA,QAAQ;AACT,GAjBM,EAiBJ,EAjBI,CAAT;AAmBA,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EACD;AACIP,MAAAA,UADJ;AAEIC,MAAAA;AAFJ,KAFR;AAAA,cAQQG;AARR;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAnCM;;GAAMD,kB;;KAAAA,kB","sourcesContent":["import { \r\n    createContext, \r\n    Dispatch, \r\n    ReactNode, \r\n    SetStateAction,\r\n    useState,\r\n    useEffect,\r\n    useContext\r\n} from 'react'\r\nimport Tmdb from '../../api/Tmdb'\r\nimport Youtube from '../../api/Youtube'\r\nimport { DetailsSerieContext} from '../DetailsSerie'\r\n\r\ntype HomeMovies = [\r\n    {  \r\n        slug:'Netflix',\r\n        title:'Originais Netflix',\r\n        movies: Serie[];\r\n    },\r\n\r\n    {\r\n        slug:'Popular'\r\n        title:'Populares',\r\n        movies:Serie[] | Movie[]\r\n    },\r\n\r\n    {\r\n        slug:'Em alta',\r\n        title:'SÃ©ries em alta',\r\n        movies:Serie[]\r\n    },\r\n]\r\ntype Serie = {\r\n    name:string,\r\n    id:string;\r\n    vote_average:number,\r\n    first_air_date:string,\r\n    number_of_seasons:number,\r\n    overview:string,\r\n    genres:Genre[],\r\n    backdrop_path:string,\r\n    poster_path:string,\r\n    original_name:string\r\n}\r\n\r\ntype Genre = {\r\n    name:string\r\n}\r\n\r\ntype Movie = Omit<Serie, 'first_air_date' | 'number_of_seasons'>\r\n\r\ntype HomeMoviesContextProps = {\r\n    homeMovies: HomeMovies,\r\n    setHomeMovies:Dispatch<SetStateAction<HomeMovies>>\r\n\r\n}\r\nconst defaultValue = {\r\n    homeMovies:[] as unknown as HomeMovies,\r\n    setHomeMovies: () => {}\r\n}\r\n\r\nexport const HomeMoviesContext = createContext<HomeMoviesContextProps>(defaultValue)\r\n\r\ninterface HomeMoviesProviderProps {\r\n    children:ReactNode\r\n} \r\n\r\nexport const HomeMoviesProvider = ({children}: HomeMoviesProviderProps) => {\r\n    const [ homeMovies, setHomeMovies ] = useState<HomeMovies>(defaultValue.homeMovies)\r\n    const { setDetailsSerie, detailsSerie} = useContext(DetailsSerieContext)\r\n    useEffect(() => {\r\n        const loadPage = async() => {\r\n          const movies  = await Tmdb.getHomeMovies() as HomeMovies\r\n          setHomeMovies(movies)\r\n          \r\n          const netflixSeries = movies.filter(list => list.slug === \"Netflix\")[0].movies\r\n          const randomSerie = netflixSeries[Math.floor(Math.random() * (netflixSeries.length - 1) )] \r\n          const detailsRandomSerie = await Tmdb.getDetailsSerie(randomSerie.id) \r\n          const trailerKey = await Youtube.getTrailer(detailsRandomSerie.name)\r\n          const detailsSerieWithTrailer = Object.assign(detailsRandomSerie, {trailerKey}) \r\n          \r\n          setDetailsSerie(detailsSerieWithTrailer)\r\n          console.log(detailsSerie, homeMovies)\r\n        } \r\n        \r\n    \r\n        loadPage()\r\n      }, [])\r\n\r\n    return (\r\n        <HomeMoviesContext.Provider \r\n            value={\r\n                {\r\n                    homeMovies,\r\n                    setHomeMovies\r\n                }\r\n            }>\r\n            {\r\n                children\r\n            }\r\n        </HomeMoviesContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}